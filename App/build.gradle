apply plugin: 'com.android.application'
//apply plugin: 'com.droidtitan.lintcleaner'
//apply plugin: 'com.getkeepsafe.dexcount'
// 设置编码
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}


android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION as String
    // 默认的文件配置
    defaultConfig {
        applicationId DefaultApplicationId as String
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        // 版本名称
        versionName APK_VERSON_NAME as String
        // 版本号
        versionCode APK_VERSON_CODE as int
    }

    //为不同的buildTypes配置签名
    signingConfigs {
        //release的keystore信息
        release {
            storeFile file('KeyStore/KeyStore.jks')
            storePassword "zoruyg"
            keyAlias "baofeng"
            keyPassword "zoruyg"
        }
//        debug {
//            storeFile file('KeyStore/KeyStore_Debug.jks')
//            storePassword "zoruyg"
//            keyAlias "baofeng"
//            keyPassword "zoruyg"
//        }
    }
    buildTypes {
        release {
            // 文件对齐压缩
            zipAlignEnabled true
            // 移除未使用的资源
//            shrinkResources true
            // 调用签名文件
            signingConfig signingConfigs.release
            // 是否使用混淆文件
            minifyEnabled true
            // 指定混淆文件的路径
            proguardFile 'proguard-rules.pro'
        }
        debug {
//            debuggable true
//            jniDebuggable false
//            signingConfig signingConfigs.debug
//            renderscriptDebuggable false
//            renderscriptOptimLevel 3
//            minifyEnabled false
//            pseudoLocalesEnabled true
            applicationIdSuffix '.debug'
            // 为该类型设置属性值
            buildConfigField "boolean", "DEBUG_MODEL", "true"
            matchingFallbacks = ['release']   // instead use this

        }
    }
    compileOptions {
        // 配置jdk版本
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    // Specifies a flavor dimension.
    flavorDimensions "color"

    productFlavors {
        baidu {
            dimension "color"
            // 对占位符进行替换
            manifestPlaceholders = [umeng_channel: "baidu"]


        }
//        google {
//            applicationId "com.storm.powerimprove.international"
//            manifestPlaceholders = [umeng_channel: "google"]
//        }
        productFlavors.all {
            flavor -> flavor.manifestPlaceholders = [umeng_channel: name]
        }

    }

    // 为代码指定路径
    sourceSets {
        main {
            //配置.so文件调用
            jni.srcDirs = []
            jniLibs.srcDir 'libs'

        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }




    // //打开dex增量编译
    // dexOptions {
    //     incremental true
    // }

    // 构建时,忽略lint检查
    lintOptions {
        abortOnError false
        disable 'InvalidPackage'
    }

}
//lintCleaner {
//    // Exclude specific files
//    exclude = ['com_crashlytics_export_strings.xml', 'config.xml']
//
//    // Ability to ignore all resource files. False by default.
//    ignoreResFiles = true
//
//    // Default path is build/outputs/lint-results.xml
//    lintXmlFilePath = 'path/to/lint-results.xml'
//}
//
//dexcount {
//    includeClasses = false
//    includeFieldCount = true
//    includeTotalMethodCount = false
//    printAsTree = false
//    orderByMethodCount = false
//    verbose = false
//}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':CommonModule')
    implementation project(':NetModule')
    debugImplementation project(path: ':DevModule', configuration: 'default')
}
