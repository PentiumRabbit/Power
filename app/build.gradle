apply plugin: 'com.android.application'
def versionMajor = 1;
def versionMinor = 0;
def versionPatch = 0;
def versionBuild = 0;
// 设置编码
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('MMdd')
    return formattedDate
};

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    // 默认的文件配置
    defaultConfig {
        applicationId project.DefaultApplicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        // 版本名称
        versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"
        // 版本号
        versionCode versionMajor * 1000 + versionMinor * 100 + versionPatch * 10 + versionBuild

        buildConfigField "boolean", "DEBUG_MODEL", "false"
    }
    // 构建时,忽略lint检查
    lintOptions {
        abortOnError false
    }
    //为不同的buildTypes配置签名
    signingConfigs {
        //release的keystore信息
        release {
            storeFile file('KeyStore/KeyStore.jks')
            storePassword "zoruyg"
            keyAlias "baofeng"
            keyPassword "zoruyg"
        }
        debug {
            storeFile file('KeyStore/KeyStore_Debug.jks')
            storePassword "zoruyg"
            keyAlias "baofeng"
            keyPassword "zoruyg"
        }
    }
    buildTypes {
        release {
            // 文件对齐压缩
            zipAlignEnabled true
            // 移除未使用的资源
//            shrinkResources true
            // 调用签名文件
            signingConfig signingConfigs.release
            // 是否使用混淆文件
            minifyEnabled true
            // 指定混淆文件的路径
            proguardFile 'proguard-rules.pro'

            android.buildTypes.all { buildType ->
                task "${buildType.name}CopyFiles"(type: Copy)
                "${buildType.name}CopyFiles" {
                    description = 'Copies html5 files from the common library...'
                    from 'D:\\123.png'
                    into 'assets/'
//        include('**/*')
                }

                tasks.getByPath(":${project.name}:assemble${buildType.name.capitalize()}").dependsOn "${buildType.name}CopyFiles"
            }
        }
        debug {
            debuggable true
            jniDebuggable false
            signingConfig signingConfigs.debug
            renderscriptDebuggable false
            renderscriptOptimLevel 3
            minifyEnabled false
            pseudoLocalesEnabled true
            applicationIdSuffix '.debug'
            versionNameSuffix '.debug.' + getDate()
            zipAlignEnabled false
            // 为该类型设置属性值
            buildConfigField "boolean", "DEBUG_MODEL", "true"
        }
    }
    compileOptions {
        // 配置jdk版本
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    productFlavors {
        baidu {
            // 对占位符进行替换
            manifestPlaceholders = [umeng_channel: "baidu"]
        }
        google {
            applicationId "com.storm.powerimprove.international"
            manifestPlaceholders = [umeng_channel: "google"]
        }
        productFlavors.all {
            flavor -> flavor.manifestPlaceholders = [umeng_channel: name]
        }

    }

    // 为代码指定路径
    sourceSets {
        main {
            //配置.so文件调用
            jni.srcDirs = []
            jniLibs.srcDir 'libs'

        }
    }

    dependencies {
        compile fileTree(dir: 'libs', include: ['*.jar'])
        compile project(':NetConnect')
        compile project(':AndroidCommon')

        // 添加检测OOM的jar功能包依赖
        debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
        releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'

    }

    lintOptions {
        abortOnError false
    }
    //打开dex增量编译
    dexOptions {
        incremental true
    }

}

task copyFiles(type: Copy)

copyFiles {
    description = 'Copies html5 files from the common library...'
    from 'D:\\123.png'
    into 'assets/'
//    include('**/*')
}

dependencies {
    compile 'com.android.support:support-v4:23.+'
}//preBuild.dependsOn copyFiles